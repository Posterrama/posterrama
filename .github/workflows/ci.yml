name: CI/CD

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
        types: [opened, synchronize, reopened]

permissions:
  contents: write

jobs:
    # Pre-review quality checks for pull requests
    code-quality:
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        name: Code Quality Checks

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Code Linting
              run: npm run lint

            - name: Code Formatting Check
              run: npm run format:check

            - name: Security Audit (Filtered)
              run: npm run deps:security-daily

            - name: Check for large files
              run: |
                  echo "Checking for large files..."
                  find . -name "*.js" -size +500k -exec echo "⚠️ Large file detected: {}" \; || true

            - name: Check for console.log statements
              run: |
                  CONSOLE_LOGS=$(grep -r "console\.log(" public/ server.js sources/ utils/ middleware/ --include="*.js" --exclude-dir=node_modules | grep -v ": \*" | grep -v "console\.log = " | grep -v "originalConsoleLog" | grep -v "logger\." | grep -v "client-logger.js" || true)
                  if [ -n "$CONSOLE_LOGS" ]; then
                    echo "❌ Found console.log statements in production code:"
                    echo "$CONSOLE_LOGS"
                    exit 1
                  else
                    echo "✅ No console.log statements found in production code"
                  fi

    # Comprehensive test suite - must pass before merge
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: ['16.x', '18.x', '20.x']

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Create config from template
              run: |
                  if [ ! -f config.json ]; then
                    cp config.example.json config.json
                  fi

            - name: Create test config
              run: |
                  cat > config.json << 'EOF'
                  {
                    "serverName": "Test Server",
                    "baseUrl": "http://localhost:3000",
                    "port": 3000,
                    "sources": {
                      "themoviedb": {
                        "url": "https://api.themoviedb.org/3",
                        "apiKey": "test_key"
                      },
                      "thetvdb": {
                        "url": "https://api4.thetvdb.com/v4",
                        "apiKey": "test_key"
                      }
                    }
                  }
                  EOF

            - name: Run all tests
              run: npm test

            - name: Verify test results
              run: |
                  echo "✅ All tests passed successfully!"
                  echo "Tests must pass before code can be merged."

            - name: Generate coverage report
              if: matrix.node-version == '18.x'
              run: npm run test:coverage

            - name: Update badges in README
              if: matrix.node-version == '18.x' && github.event_name == 'push' && github.ref == 'refs/heads/main'
              run: |
                npm run badges:update
                if git diff --quiet --exit-code -- README.md; then
                  echo "No README changes to commit."
                else
                  git config user.name "github-actions"
                  git config user.email "github-actions@users.noreply.github.com"
                  git add README.md
                  git commit -m "chore(ci): auto-update badges (tests/coverage)"
                  git push
                fi

            - name: Upload coverage to Codecov
              if: matrix.node-version == '18.x'
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    security:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run filtered security audit
              run: npm run deps:security-audit

            - name: Check for known vulnerabilities (excluding accepted risks)
              run: |
                  echo "ℹ️ Note: Plex API vulnerabilities are accepted as known risks"
                  echo "See docs/DEPENDENCY-MANAGEMENT.md for details"

    build:
        needs: [code-quality, test, security]
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Validate config.json against schema
              run: |
                  node -e "const Ajv=require('ajv');const fs=require('fs');const path=require('path');const ajv=new Ajv({allErrors:true});const schema=JSON.parse(fs.readFileSync('config.schema.json','utf8'));const data=JSON.parse(fs.readFileSync('config.json','utf8'));const validate=ajv.compile(schema);if(!validate(data)){console.error('Config validation failed:',validate.errors);process.exit(1)}console.log('Config validation passed')"

            - name: Build application
              run: |
                  echo "✅ Building application..."
                  # Add any build steps here if needed
                  echo "Build completed successfully!"

            - name: Final verification
              run: |
                  echo "🎉 All checks passed!"
                  echo "✅ Code quality: PASSED"
                  echo "✅ Security audit: PASSED (with accepted risks)" 
                  echo "✅ All tests: PASSED"
                  echo "✅ Build: PASSED"
                  echo ""
                  echo "Code is ready for merge! 🚀"
