{
    "openapi": "3.0.0",
    "info": {
        "title": "Posterrama API",
        "version": "2.6.0",
        "description": "API documentation for the posterrama.app screensaver application. This documents the public API used by the frontend to retrieve media and configuration.",
        "contact": {
            "name": "Posterrama",
            "url": "https://github.com/Posterrama/posterrama"
        },
        "license": {
            "name": "GPL-3.0-or-later",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        }
    },
    "tags": [
        {
            "name": "Public API",
            "description": "Endpoints available to the frontend client without authentication."
        },
        {
            "name": "Admin",
            "description": "Secured endpoints for admin panel, setup, and configuration. Requires an active admin session where applicable."
        },
        {
            "name": "Devices",
            "description": "Device management endpoints for registration, heartbeat, pairing, commands, and admin device operations."
        },
        {
            "name": "Groups",
            "description": "Admin endpoints for managing device groups and broadcasting commands."
        },
        {
            "name": "Authentication",
            "description": "General authentication and authorization endpoints."
        },
        {
            "name": "Configuration",
            "description": "Application configuration management endpoints."
        },
        {
            "name": "Validation",
            "description": "Configuration and data validation endpoints."
        },
        {
            "name": "Metrics",
            "description": "Performance monitoring and metrics endpoints."
        },
        {
            "name": "Frontend",
            "description": "Frontend asset serving, templates and static pages."
        },
        {
            "name": "Cache",
            "description": "Cache management and configuration endpoints."
        },
        {
            "name": "GitHub Integration",
            "description": "GitHub API integration for releases and updates."
        },
        {
            "name": "Auto-Update",
            "description": "Automatic application update management endpoints."
        },
        {
            "name": "Documentation",
            "description": "API documentation and specification endpoints."
        },
        {
            "name": "Security",
            "description": "Security monitoring and violation reporting endpoints."
        },
        {
            "name": "Site Server",
            "description": "Public-facing site server endpoints and routes."
        }
    ],
    "servers": [
        {
            "url": "/",
            "description": "Current server"
        }
    ],
    "components": {
        "securitySchemes": {
            "sessionAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "connect.sid",
                "description": "Session-based authentication using cookies"
            },
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Bearer token authentication. The application accepts API keys as Bearer tokens."
            }
        },
        "schemas": {
            "StandardOkResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "BackupCreateResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "backup": {
                        "$ref": "#/components/schemas/BackupRecord"
                    }
                }
            },
            "BackupRecord": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Backup identifier (filename or UUID)"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "sizeBytes": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "backup type (manual|auto|upgrade)"
                    }
                }
            },
            "BackupListResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BackupRecord"
                        }
                    }
                }
            },
            "BackupCleanupResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "removed": {
                        "type": "integer"
                    },
                    "retained": {
                        "type": "integer"
                    }
                }
            },
            "BackupRestoreResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "restored": {
                        "type": "boolean"
                    },
                    "backup": {
                        "$ref": "#/components/schemas/BackupRecord"
                    }
                }
            },
            "BackupDeleteResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "BackupSchedule": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "cron": {
                        "type": "string",
                        "description": "Cron expression for automated backups"
                    },
                    "retain": {
                        "type": "integer",
                        "description": "How many backups to retain"
                    }
                }
            },
            "BackupScheduleResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "schedule": {
                        "$ref": "#/components/schemas/BackupSchedule"
                    }
                }
            },
            "NotificationTestRequest": {
                "type": "object",
                "properties": {
                    "level": {
                        "type": "string",
                        "enum": ["info", "warn", "error"],
                        "default": "warn"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "NotificationTestResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "level": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "Device": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique device identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name"
                    },
                    "location": {
                        "type": "string",
                        "description": "Optional physical location"
                    },
                    "tags": {
                        "type": "array",
                        "description": "Custom device tags",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "Assigned group IDs",
                        "items": {
                            "type": "string"
                        }
                    },
                    "installId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Browser/session install identifier (nullable)"
                    },
                    "hardwareId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Stable hardware identifier when available (nullable)"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastSeenAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Reported status",
                        "enum": ["unknown", "online", "offline"]
                    },
                    "clientInfo": {
                        "type": "object",
                        "properties": {
                            "userAgent": {
                                "type": "string"
                            },
                            "screen": {
                                "type": "object",
                                "properties": {
                                    "w": {
                                        "type": "integer"
                                    },
                                    "h": {
                                        "type": "integer"
                                    },
                                    "dpr": {
                                        "type": "number"
                                    }
                                }
                            },
                            "mode": {
                                "type": "string"
                            }
                        }
                    },
                    "settingsOverride": {
                        "type": "object",
                        "description": "Per-device settings override payload"
                    },
                    "preset": {
                        "type": "string",
                        "description": "Optional preset name"
                    },
                    "currentState": {
                        "type": "object",
                        "properties": {
                            "mediaId": {
                                "type": "string",
                                "nullable": true
                            },
                            "paused": {
                                "type": "boolean",
                                "nullable": true
                            },
                            "pinned": {
                                "type": "boolean",
                                "nullable": true
                            },
                            "pinMediaId": {
                                "type": "string",
                                "nullable": true
                            },
                            "poweredOff": {
                                "type": "boolean",
                                "nullable": true
                            }
                        }
                    },
                    "wsConnected": {
                        "type": "boolean",
                        "description": "Derived flag indicating active WebSocket connection"
                    }
                }
            },
            "DeviceRegisterRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "installId": {
                        "type": "string",
                        "nullable": true
                    },
                    "hardwareId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "DeviceRegisterResponse": {
                "type": "object",
                "required": ["deviceId", "deviceSecret"],
                "properties": {
                    "deviceId": {
                        "type": "string"
                    },
                    "deviceSecret": {
                        "type": "string"
                    }
                }
            },
            "DeviceQueuedCommand": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Server-assigned queue id"
                    },
                    "type": {
                        "type": "string"
                    },
                    "payload": {
                        "type": "object"
                    }
                }
            },
            "DeviceHeartbeatRequest": {
                "type": "object",
                "required": ["deviceId", "deviceSecret"],
                "properties": {
                    "deviceId": {
                        "type": "string"
                    },
                    "deviceSecret": {
                        "type": "string"
                    },
                    "userAgent": {
                        "type": "string"
                    },
                    "screen": {
                        "type": "object",
                        "properties": {
                            "w": {
                                "type": "integer"
                            },
                            "h": {
                                "type": "integer"
                            },
                            "dpr": {
                                "type": "number"
                            }
                        }
                    },
                    "mode": {
                        "type": "string"
                    },
                    "mediaId": {
                        "type": "string"
                    },
                    "paused": {
                        "type": "boolean"
                    },
                    "pinned": {
                        "type": "boolean"
                    },
                    "pinMediaId": {
                        "type": "string"
                    },
                    "poweredOff": {
                        "type": "boolean"
                    },
                    "installId": {
                        "type": "string"
                    },
                    "hardwareId": {
                        "type": "string"
                    }
                }
            },
            "DeviceHeartbeatResponse": {
                "type": "object",
                "properties": {
                    "serverTime": {
                        "type": "integer"
                    },
                    "commandsQueued": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeviceQueuedCommand"
                        }
                    }
                }
            },
            "PairingCodeRequest": {
                "type": "object",
                "properties": {
                    "ttlMs": {
                        "type": "integer",
                        "description": "TTL in milliseconds (min 60000, max 3600000)",
                        "example": 600000
                    }
                }
            },
            "PairingCodeResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Numeric pairing code"
                    },
                    "token": {
                        "type": "string",
                        "description": "One-time token (only shown once) for added security"
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PairingClaimRequest": {
                "type": "object",
                "required": ["code"],
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token from PairingCodeResponse"
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    }
                }
            },
            "PairingClaimResponse": {
                "type": "object",
                "properties": {
                    "deviceId": {
                        "type": "string"
                    },
                    "deviceSecret": {
                        "type": "string"
                    }
                }
            },
            "DeviceCommandRequest": {
                "type": "object",
                "required": ["type"],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Command type (e.g., reload, clear-cache, next, prev)"
                    },
                    "payload": {
                        "type": "object"
                    }
                }
            },
            "DeviceCommandResponse": {
                "type": "object",
                "properties": {
                    "queued": {
                        "type": "boolean"
                    },
                    "live": {
                        "type": "boolean"
                    },
                    "command": {
                        "$ref": "#/components/schemas/DeviceQueuedCommand"
                    }
                }
            },
            "DeviceCommandAck": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok", "timeout", "error"]
                    },
                    "info": {
                        "type": "object",
                        "nullable": true
                    }
                }
            },
            "Group": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "settingsTemplate": {
                        "type": "object",
                        "description": "Settings template applied to group members"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Sort order (ascending)"
                    }
                }
            },
            "GroupCommandResult": {
                "type": "object",
                "properties": {
                    "deviceId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Per-device status",
                        "enum": ["ok", "timeout", "queued", "error"]
                    },
                    "detail": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "DevicePatchRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "settingsOverride": {
                        "type": "object"
                    },
                    "preset": {
                        "type": "string"
                    }
                }
            },
            "GroupCreateRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "settingsTemplate": {
                        "type": "object"
                    },
                    "order": {
                        "type": "integer"
                    }
                }
            },
            "GroupPatchRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "settingsTemplate": {
                        "type": "object"
                    },
                    "order": {
                        "type": "integer"
                    }
                }
            },
            "DeviceMergeRequest": {
                "type": "object",
                "required": ["sourceIds"],
                "properties": {
                    "sourceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of devices to merge into target"
                    }
                }
            },
            "GroupCommandResponse": {
                "type": "object",
                "properties": {
                    "ok": {
                        "type": "boolean"
                    },
                    "live": {
                        "type": "integer"
                    },
                    "queued": {
                        "type": "integer"
                    },
                    "total": {
                        "type": "integer"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupCommandResult"
                        }
                    }
                }
            },
            "Config": {
                "type": "object",
                "properties": {
                    "clockWidget": {
                        "type": "boolean",
                        "description": "Whether the clock widget is enabled."
                    },
                    "transitionIntervalSeconds": {
                        "type": "integer",
                        "description": "Time in seconds between media transitions."
                    },
                    "backgroundRefreshMinutes": {
                        "type": "integer",
                        "description": "How often the media playlist is refreshed from the server."
                    },
                    "showClearLogo": {
                        "type": "boolean",
                        "description": "Whether the ClearLogo image should be displayed."
                    },
                    "showPoster": {
                        "type": "boolean",
                        "description": "Whether the poster image should be displayed."
                    },
                    "showMetadata": {
                        "type": "boolean",
                        "description": "Whether metadata text (tagline, year, etc.) should be displayed."
                    },
                    "showRottenTomatoes": {
                        "type": "boolean",
                        "description": "Whether the Rotten Tomatoes badge should be displayed."
                    },
                    "rottenTomatoesMinimumScore": {
                        "type": "number",
                        "description": "Minimum score (scale 0-10) for an item to be included if it has a Rotten Tomatoes rating. A value of 7.5 corresponds to 75%."
                    },
                    "kenBurnsEffect": {
                        "type": "object",
                        "properties": {
                            "enabled": {
                                "type": "boolean"
                            },
                            "durationSeconds": {
                                "type": "integer"
                            }
                        }
                    },
                    "isPublicSite": {
                        "type": "boolean",
                        "description": "Flag indicating if this is the public site server (added by site server proxy)."
                    }
                }
            },
            "MediaItem": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "A unique identifier for the media item, composed of server type, name and item key."
                    },
                    "title": {
                        "type": "string"
                    },
                    "backgroundUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL to the background image, proxied through the app."
                    },
                    "posterUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL to the poster image, proxied through the app."
                    },
                    "clearLogoUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "URL to the ClearLogo image, proxied through the app."
                    },
                    "tagline": {
                        "type": "string",
                        "nullable": true
                    },
                    "rating": {
                        "type": "number",
                        "nullable": true,
                        "description": "The general audience rating (e.g., 7.8)."
                    },
                    "year": {
                        "type": "integer",
                        "nullable": true
                    },
                    "imdbUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Direct link to the IMDb page for this item."
                    },
                    "rottenTomatoes": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                            "score": {
                                "type": "integer",
                                "description": "The Rotten Tomatoes score (0-100)."
                            },
                            "icon": {
                                "type": "string",
                                "enum": ["fresh", "rotten", "certified-fresh"],
                                "description": "The corresponding RT icon."
                            },
                            "originalScore": {
                                "type": "number",
                                "description": "The original score from the source (e.g., scale 0-10)."
                            }
                        }
                    },
                    "_raw": {
                        "type": "object",
                        "description": "Raw metadata from the media server (only included in debug mode)."
                    }
                }
            },
            "ApiMessage": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "building"
                    },
                    "message": {
                        "type": "string",
                        "example": "Playlist is being built. Please try again in a few seconds."
                    },
                    "retryIn": {
                        "type": "integer",
                        "example": 2000
                    },
                    "error": {
                        "type": "string"
                    }
                }
            },
            "AdminApiResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    }
                }
            },
            "PlexConnectionRequest": {
                "type": "object",
                "required": ["hostname", "port"],
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname or IP address of the Plex server.",
                        "example": "192.168.1.10"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the Plex server.",
                        "example": 32400
                    },
                    "token": {
                        "type": "string",
                        "description": "The Plex X-Plex-Token. Optional when testing, required when fetching libraries if none is configured."
                    }
                }
            },
            "PlexLibrary": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The unique key of the library.",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the library.",
                        "example": "Movies"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the library.",
                        "example": "movie",
                        "enum": ["movie", "show", "artist"]
                    }
                }
            },
            "PlexLibrariesResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "libraries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlexLibrary"
                        }
                    }
                }
            },
            "AdminConfigResponse": {
                "type": "object",
                "properties": {
                    "config": {
                        "type": "object",
                        "description": "The complete contents of config.json."
                    },
                    "env": {
                        "type": "object",
                        "description": "A selection of relevant environment variables."
                    },
                    "security": {
                        "type": "object",
                        "properties": {
                            "is2FAEnabled": {
                                "type": "boolean",
                                "description": "Indicates whether 2FA is enabled for the admin."
                            }
                        }
                    }
                }
            },
            "SaveConfigRequest": {
                "type": "object",
                "properties": {
                    "config": {
                        "type": "object",
                        "description": "The complete config.json object to save."
                    },
                    "env": {
                        "type": "object",
                        "description": "Key-value pairs of environment variables to save."
                    }
                }
            },
            "ChangePasswordRequest": {
                "type": "object",
                "required": ["currentPassword", "newPassword", "confirmPassword"],
                "properties": {
                    "currentPassword": {
                        "type": "string",
                        "format": "password"
                    },
                    "newPassword": {
                        "type": "string",
                        "format": "password"
                    },
                    "confirmPassword": {
                        "type": "string",
                        "format": "password"
                    }
                }
            },
            "Generate2FAResponse": {
                "type": "object",
                "properties": {
                    "qrCodeDataUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "A data URI of the QR code image that can be scanned."
                    }
                }
            },
            "Verify2FARequest": {
                "type": "object",
                "required": ["token"],
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The 6-digit TOTP code from the authenticator app."
                    }
                }
            },
            "Disable2FARequest": {
                "type": "object",
                "required": ["password"],
                "properties": {
                    "password": {
                        "type": "string",
                        "format": "password",
                        "description": "The current admin password of the user."
                    }
                }
            },
            "DebugResponse": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "A note about the contents of the response."
                    },
                    "playlist_item_count": {
                        "type": "integer",
                        "description": "The number of items in the current playlist cache."
                    },
                    "playlist_items_raw": {
                        "type": "array",
                        "description": "An array of the raw media objects as received from the media server.",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "ApiKeyResponse": {
                "type": "object",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The newly generated API key. Will only be shown once."
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "RefreshMediaResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Media playlist successfully refreshed. 150 items found."
                    },
                    "itemCount": {
                        "type": "integer",
                        "example": 150,
                        "description": "Number of media items found after refresh."
                    }
                }
            },
            "LogEntry": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "level": {
                        "type": "string",
                        "enum": ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"]
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "Error message describing what went wrong."
                    }
                }
            },
            "BasicHealthResponse": {
                "type": "object",
                "required": ["status", "service", "version", "timestamp", "uptime"],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "description": "Service status",
                        "example": "ok"
                    },
                    "service": {
                        "type": "string",
                        "description": "Service name",
                        "example": "posterrama"
                    },
                    "version": {
                        "type": "string",
                        "description": "Service version",
                        "example": "1.2.5"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Current timestamp",
                        "example": "2025-07-27T12:00:00Z"
                    },
                    "uptime": {
                        "type": "number",
                        "description": "Process uptime in seconds",
                        "example": 3600
                    }
                }
            },
            "HealthCheckResult": {
                "type": "object",
                "required": ["name", "status", "message"],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check performed",
                        "example": "Connection: Plex Server (plex)"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok", "warn", "error"],
                        "description": "The status of the check",
                        "example": "ok"
                    },
                    "message": {
                        "type": "string",
                        "description": "A descriptive message about the check result",
                        "example": "Connection successful"
                    },
                    "details": {
                        "type": "object",
                        "description": "Additional details about the check"
                    }
                }
            },
            "HealthCheckResponse": {
                "type": "object",
                "required": ["status", "timestamp", "checks"],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok", "error", "error"],
                        "description": "Overall health status of the application",
                        "example": "ok"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the health check was performed",
                        "example": "2025-07-27T12:00:00Z"
                    },
                    "checks": {
                        "type": "array",
                        "description": "List of individual health check results",
                        "items": {
                            "$ref": "#/components/schemas/HealthCheckResult"
                        }
                    }
                }
            },
            "ValidationResponse": {
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the data is valid"
                    },
                    "message": {
                        "type": "string",
                        "description": "Validation result message"
                    },
                    "sanitized": {
                        "type": "object",
                        "description": "Sanitized data if validation passed"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of validation errors if any"
                    }
                }
            },
            "PlexTestResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Whether the connection test was successful"
                    },
                    "message": {
                        "type": "string",
                        "description": "Result message"
                    },
                    "serverInfo": {
                        "type": "object",
                        "description": "Plex server information if successful"
                    }
                }
            },
            "ApiKeyStatusResponse": {
                "type": "object",
                "properties": {
                    "hasApiKey": {
                        "type": "boolean",
                        "description": "Whether an API key is configured"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the current API key"
                    }
                }
            },
            "MetricsResponse": {
                "type": "object",
                "properties": {
                    "performance": {
                        "type": "object",
                        "description": "Performance metrics"
                    },
                    "endpoints": {
                        "type": "object",
                        "description": "Endpoint usage metrics"
                    },
                    "system": {
                        "type": "object",
                        "description": "System resource metrics"
                    },
                    "cache": {
                        "type": "object",
                        "description": "Cache usage metrics"
                    }
                }
            },
            "GenreResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Whether the genre fetch was successful"
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of available genres"
                    }
                }
            },
            "LoginRequest": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username for authentication"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "description": "Password for authentication"
                    }
                }
            },
            "LoginResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Whether login was successful"
                    },
                    "requires2FA": {
                        "type": "boolean",
                        "description": "Whether 2FA verification is required"
                    },
                    "redirectTo": {
                        "type": "string",
                        "description": "URL to redirect to after login"
                    },
                    "message": {
                        "type": "string",
                        "description": "Login result message"
                    }
                }
            },
            "SessionResponse": {
                "type": "object",
                "properties": {
                    "sessions": {
                        "type": "array",
                        "description": "List of active user sessions"
                    }
                }
            },
            "TMDBConnectionRequest": {
                "type": "object",
                "required": ["apiKey"],
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The TMDB API key"
                    }
                }
            },
            "TMDBGenresResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of TMDB genres"
                    }
                }
            },
            "PlexGenresResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Plex genres"
                    }
                }
            },
            "GitHubRelease": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "tag_name": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "body": {
                        "type": "string"
                    },
                    "published_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "prerelease": {
                        "type": "boolean"
                    }
                }
            },
            "GitHubReleaseResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "release": {
                        "$ref": "#/components/schemas/GitHubRelease"
                    }
                }
            },
            "UpdateCheckResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "hasUpdate": {
                        "type": "boolean"
                    },
                    "currentVersion": {
                        "type": "string"
                    },
                    "latestVersion": {
                        "type": "string"
                    },
                    "releaseInfo": {
                        "$ref": "#/components/schemas/GitHubRelease"
                    }
                }
            }
        }
    },
    "paths": {
        "/api/v1/config": {
            "get": {
                "summary": "Get configuration (v1 API alias)",
                "description": "Version 1 API alias that redirects to the main configuration endpoint /get-config",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "Configuration data (handled by /get-config endpoint)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/media": {
            "get": {
                "summary": "Get media data (v1 API alias)",
                "description": "Version 1 API alias that redirects to the main media endpoint /get-media",
                "tags": ["Public API"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search term to filter media"
                    },
                    {
                        "in": "query",
                        "name": "year",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by year"
                    },
                    {
                        "in": "query",
                        "name": "genre",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by genre"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media data (handled by /get-media endpoint)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MediaItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/preview": {
            "get": {
                "summary": "Preview page",
                "description": "Serves a lightweight preview HTML page for quick manual checks.",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Preview HTML page",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "summary": "Admin panel homepage",
                "description": "Serves the main admin panel interface. Redirects to setup if not configured, requires authentication.",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Admin panel served successfully",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirects to setup page if admin not configured"
                    },
                    "401": {
                        "description": "Authentication required"
                    }
                }
            }
        },
        "/admin.html": {
            "get": {
                "summary": "Serve admin panel HTML (alternative route)",
                "description": "Alternative route for admin panel HTML with asset version stamping",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Admin panel HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "get": {
                "summary": "Serve main application HTML",
                "description": "Serves the main application HTML with asset version stamping for cache busting. Injects the ASSET_VERSION into the HTML template before serving.\n",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Main application HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/index.html": {
            "get": {
                "summary": "Serve main application HTML (alternative route)",
                "description": "Alternative route for main application HTML with asset version stamping",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Main application HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/promo.html": {
            "get": {
                "summary": "Serve promotional page",
                "description": "Serves the promotional page with automatic asset versioning and cache-busting for iOS devices",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Promotional page HTML content",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/admin/config/validate": {
            "post": {
                "summary": "Validate configuration data",
                "description": "Validates configuration object against schema and returns sanitized data",
                "tags": ["Validation"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "Configuration object to validate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Configuration is valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Configuration is valid"
                                        },
                                        "sanitized": {
                                            "type": "object",
                                            "description": "Sanitized configuration data"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/admin/plex/validate-connection": {
            "post": {
                "summary": "Validate Plex connection data",
                "description": "Validates Plex server connection parameters against schema",
                "tags": ["Validation"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string",
                                        "description": "Plex server hostname or IP"
                                    },
                                    "port": {
                                        "type": "number",
                                        "description": "Plex server port"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Plex authentication token"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Plex connection data is valid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Plex connection data is valid"
                                        },
                                        "sanitized": {
                                            "type": "object",
                                            "description": "Sanitized connection data"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/metrics/performance": {
            "get": {
                "summary": "Get performance metrics",
                "description": "Returns current performance metrics including response times, throughput, and resource usage",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Performance metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "responseTime": {
                                            "type": "object",
                                            "description": "Average response times"
                                        },
                                        "throughput": {
                                            "type": "object",
                                            "description": "Requests per second metrics"
                                        },
                                        "resourceUsage": {
                                            "type": "object",
                                            "description": "CPU and memory usage"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/endpoints": {
            "get": {
                "summary": "Get endpoint metrics",
                "description": "Returns metrics for individual API endpoints including request counts and response times",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Endpoint metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "endpoints": {
                                            "type": "object",
                                            "description": "Per-endpoint metrics"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/errors": {
            "get": {
                "summary": "Get error metrics",
                "description": "Returns error statistics including error rates, error types, and recent errors",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Error metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errorRate": {
                                            "type": "number",
                                            "description": "Current error rate percentage"
                                        },
                                        "errorTypes": {
                                            "type": "object",
                                            "description": "Breakdown by error type"
                                        },
                                        "recentErrors": {
                                            "type": "array",
                                            "description": "Recent error occurrences"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/cache": {
            "get": {
                "summary": "Get cache metrics",
                "description": "Returns cache performance metrics including hit rates, miss rates, and cache sizes",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Cache metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hitRate": {
                                            "type": "number",
                                            "description": "Cache hit rate percentage"
                                        },
                                        "missRate": {
                                            "type": "number",
                                            "description": "Cache miss rate percentage"
                                        },
                                        "size": {
                                            "type": "object",
                                            "description": "Cache size information"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/system": {
            "get": {
                "summary": "Get system metrics",
                "description": "Returns system-level metrics including memory usage, CPU usage, and uptime",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "System metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "memory": {
                                            "type": "object",
                                            "description": "Memory usage statistics"
                                        },
                                        "cpu": {
                                            "type": "object",
                                            "description": "CPU usage statistics"
                                        },
                                        "uptime": {
                                            "type": "number",
                                            "description": "Process uptime in seconds"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/realtime": {
            "get": {
                "summary": "Get real-time metrics",
                "description": "Returns current real-time metrics for live monitoring dashboards",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Real-time metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "timestamp": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "Current timestamp"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "description": "Current metric values"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/history": {
            "get": {
                "summary": "Get historical metrics",
                "description": "Returns historical metrics data for the specified time period",
                "tags": ["Metrics"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "period",
                        "schema": {
                            "type": "string",
                            "enum": ["1h", "6h", "24h", "7d", "30d"],
                            "default": "1h"
                        },
                        "description": "Time period for historical data"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historical metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "period": {
                                            "type": "string",
                                            "description": "Requested time period"
                                        },
                                        "data": {
                                            "type": "array",
                                            "description": "Time-series metric data"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/dashboard": {
            "get": {
                "summary": "Get dashboard summary metrics",
                "description": "Returns a summary of key metrics suitable for dashboard display",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Dashboard metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "summary": {
                                            "type": "object",
                                            "description": "Key metric summaries"
                                        },
                                        "alerts": {
                                            "type": "array",
                                            "description": "Active alerts or warnings"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "summary": "Prometheus metrics endpoint",
                "description": "Returns metrics in Prometheus format for monitoring systems",
                "tags": ["Metrics"],
                "responses": {
                    "200": {
                        "description": "Prometheus metrics data",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "description": "Metrics in Prometheus text format"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/export": {
            "get": {
                "summary": "Export metrics in various formats",
                "description": "Exports all metrics data in the specified format (JSON or Prometheus)",
                "tags": ["Metrics"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string",
                            "enum": ["json", "prometheus"],
                            "default": "json"
                        },
                        "description": "Export format"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics exported successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Metrics data in JSON format"
                                }
                            },
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "description": "Metrics data in Prometheus format"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/metrics/config": {
            "post": {
                "summary": "Update metrics configuration",
                "description": "Updates the metrics collection configuration",
                "tags": ["Metrics", "Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "enabled": {
                                        "type": "boolean",
                                        "description": "Enable or disable metrics collection"
                                    },
                                    "collectInterval": {
                                        "type": "number",
                                        "description": "Metrics collection interval in milliseconds"
                                    },
                                    "retentionPeriod": {
                                        "type": "number",
                                        "description": "How long to retain metrics data in milliseconds"
                                    },
                                    "endpoints": {
                                        "type": "object",
                                        "description": "Per-endpoint configuration"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Configuration updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "config": {
                                            "type": "object",
                                            "description": "Updated configuration"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid configuration"
                    }
                }
            }
        },
        "/setup.html": {
            "get": {
                "summary": "Redirect to admin setup",
                "description": "Redirects legacy setup.html requests to the unified admin setup route",
                "tags": ["Frontend"],
                "responses": {
                    "302": {
                        "description": "Redirect to /admin/setup"
                    }
                }
            }
        },
        "/login.html": {
            "get": {
                "summary": "Redirect to admin login",
                "description": "Redirects legacy login.html requests to the unified admin login route",
                "tags": ["Frontend"],
                "responses": {
                    "302": {
                        "description": "Redirect to /admin/login"
                    }
                }
            }
        },
        "/2fa-verify.html": {
            "get": {
                "summary": "Serve 2FA verification page or redirect",
                "description": "Serves the 2FA verification page if user is in an active 2FA flow, otherwise redirects to login page for security.\n",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "2FA verification page HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to /admin/login if not in 2FA flow"
                    }
                }
            }
        },
        "/admin.css": {
            "get": {
                "summary": "Serve admin CSS with cache busting",
                "description": "Serves the admin panel CSS file with no-cache headers to ensure latest version is always loaded",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Admin CSS file",
                        "content": {
                            "text/css": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin.js": {
            "get": {
                "summary": "Serve admin JavaScript with cache busting",
                "description": "Serves the admin panel JavaScript file with no-cache headers to ensure latest version is always loaded",
                "tags": ["Frontend"],
                "responses": {
                    "200": {
                        "description": "Admin JavaScript file",
                        "content": {
                            "application/javascript": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/profile/photo": {
            "get": {
                "summary": "Get current user's profile photo",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Image file"
                    },
                    "204": {
                        "description": "No avatar set"
                    }
                }
            },
            "post": {
                "summary": "Upload/update current user's profile photo",
                "tags": ["Admin"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "avatar": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Upload successful"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "delete": {
                "summary": "Remove current user's profile photo",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Deleted"
                    }
                }
            }
        },
        "/api/devices/register": {
            "post": {
                "summary": "Register a device",
                "description": "Registers a device and returns credentials. Prefers stable hardwareId; falls back to installId. Also sets a pr_iid cookie.",
                "tags": ["Devices"],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceRegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Device credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceRegisterResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many registration requests"
                    },
                    "500": {
                        "description": "Register failed"
                    }
                }
            }
        },
        "/api/devices/check": {
            "post": {
                "summary": "Check if device is registered",
                "description": "Check if a device with given ID is already registered (for QR registration polling)",
                "tags": ["Devices"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "deviceId": {
                                        "type": "string",
                                        "description": "Device ID to check"
                                    }
                                },
                                "required": ["deviceId"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Check result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "isRegistered": {
                                            "type": "boolean"
                                        },
                                        "deviceName": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/devices/heartbeat": {
            "post": {
                "summary": "Device heartbeat and command polling",
                "description": "Authenticates the device, updates status, and returns any queued commands.",
                "tags": ["Devices"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceHeartbeatRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Heartbeat processed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceHeartbeatResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many heartbeat requests"
                    },
                    "500": {
                        "description": "Heartbeat failed"
                    }
                }
            }
        },
        "/api/devices/{id}/pairing-code": {
            "post": {
                "summary": "Generate pairing code for a device",
                "description": "Admin-only. Generates a short-lived pairing code with a one-time token.",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PairingCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Pairing code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PairingCodeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Device not found"
                    },
                    "429": {
                        "description": "Too many pairing requests"
                    },
                    "500": {
                        "description": "Pair code generation failed"
                    }
                }
            }
        },
        "/api/devices/pair": {
            "post": {
                "summary": "Claim a device using a pairing code",
                "description": "Used by the device to claim an existing device record. Rotates the secret.",
                "tags": ["Devices"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PairingClaimRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "New device credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PairingClaimResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired code"
                    },
                    "429": {
                        "description": "Too many pairing attempts"
                    },
                    "500": {
                        "description": "Pair claim failed"
                    }
                }
            }
        },
        "/api/devices/{id}/pairing-code/revoke": {
            "post": {
                "summary": "Revoke the current pairing code for a device",
                "description": "Clears the pairing code so it can no longer be used.",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Revoked"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Revoke failed"
                    }
                }
            }
        },
        "/api/devices/pairing-codes/active": {
            "get": {
                "summary": "List all active pairing codes",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of active pairing codes"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "List failed"
                    }
                }
            }
        },
        "/api/qr": {
            "get": {
                "summary": "Generate a QR code",
                "description": "Generates a QR code from a provided text. Returns SVG by default, or PNG if format=png.",
                "tags": ["Admin"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "text",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Text to encode in the QR code"
                    },
                    {
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["svg", "png"],
                            "default": "svg"
                        },
                        "description": "Output image format"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QR code image",
                        "content": {
                            "image/svg+xml": {},
                            "image/png": {}
                        }
                    },
                    "400": {
                        "description": "Missing or invalid text parameter"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many QR requests"
                    },
                    "500": {
                        "description": "QR generation failed"
                    },
                    "501": {
                        "description": "QR code generation not available (module missing)"
                    }
                },
                "security": [
                    {
                        "sessionAuth": []
                    },
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/devices": {
            "get": {
                "summary": "List devices",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of devices with live WS status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Device"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "List failed"
                    }
                }
            }
        },
        "/api/devices/{id}": {
            "get": {
                "summary": "Get a device by id",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Device details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Get failed"
                    }
                }
            },
            "delete": {
                "summary": "Delete a device",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Delete failed"
                    }
                }
            },
            "patch": {
                "summary": "Patch a device",
                "description": "Update name, location, tags, groups, settingsOverride, or preset.",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DevicePatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Patch failed"
                    }
                }
            }
        },
        "/api/devices/{id}/merge": {
            "post": {
                "summary": "Merge devices into a target device",
                "description": "Merges one or more devices into the target device.",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceMergeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Merge result"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Merge failed"
                    }
                }
            }
        },
        "/api/devices/{id}/command": {
            "post": {
                "summary": "Send a command to a device",
                "description": "Sends a live WebSocket command when connected, otherwise queues it. Use wait=true to await an ACK.",
                "tags": ["Devices", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "wait",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "If true, waits up to 3s for an ACK and returns ack status"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceCommandRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Command sent or queued",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/DeviceCommandResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "queued": {
                                                    "type": "boolean"
                                                },
                                                "live": {
                                                    "type": "boolean"
                                                },
                                                "ack": {
                                                    "$ref": "#/components/schemas/DeviceCommandAck"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Live command sent but ACK timed out"
                    },
                    "400": {
                        "description": "Missing type"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Device not found"
                    },
                    "500": {
                        "description": "Send failed"
                    }
                }
            }
        },
        "/api/groups": {
            "get": {
                "summary": "List groups",
                "tags": ["Groups", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Groups list failed"
                    }
                }
            },
            "post": {
                "summary": "Create a group",
                "tags": ["Groups", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Group exists"
                    },
                    "500": {
                        "description": "Group create failed"
                    }
                }
            }
        },
        "/api/groups/{id}": {
            "patch": {
                "summary": "Patch a group",
                "tags": ["Groups", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Group patch failed"
                    }
                }
            },
            "delete": {
                "summary": "Delete a group",
                "tags": ["Groups", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Group delete failed"
                    }
                }
            }
        },
        "/api/groups/{id}/command": {
            "post": {
                "summary": "Broadcast a command to group members",
                "description": "Sends a command to all devices in the group. Use wait=true to collect per-device ACKs.",
                "tags": ["Groups", "Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "wait",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceCommandRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Broadcast result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupCommandResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Group not found"
                    },
                    "500": {
                        "description": "Group command failed"
                    }
                }
            }
        },
        "/api/admin/device-presets": {
            "get": {
                "summary": "Get device presets",
                "description": "Returns the list of saved device presets for quick per-device overrides.",
                "tags": ["Admin", "Devices"],
                "security": [
                    {
                        "sessionAuth": []
                    },
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of device presets",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "Preset identifier"
                                            },
                                            "label": {
                                                "type": "string",
                                                "description": "Human-friendly name"
                                            },
                                            "settings": {
                                                "type": "object",
                                                "description": "Settings override payload applied when preset is used"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Failed to read presets"
                    }
                }
            },
            "put": {
                "summary": "Replace device presets",
                "description": "Replaces the entire device presets list. Provide an array of presets with unique keys.",
                "tags": ["Admin", "Devices"],
                "security": [
                    {
                        "sessionAuth": []
                    },
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": ["key"],
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "description": "Preset identifier (must be unique)"
                                        },
                                        "label": {
                                            "type": "string"
                                        },
                                        "settings": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Presets replaced",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/StandardOkResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error (array required or invalid entries)"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Failed to write presets"
                    }
                }
            }
        },
        "/csp-report": {
            "post": {
                "summary": "Receive CSP violation reports",
                "description": "Accepts Content Security Policy violation reports from browsers to monitor security issues",
                "tags": ["Security"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/csp-report": {
                            "schema": {
                                "type": "object"
                            }
                        },
                        "application/reports+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Report received and logged"
                    },
                    "400": {
                        "description": "Invalid report format"
                    }
                }
            }
        },
        "/api/admin/cache/stats": {
            "get": {
                "summary": "Get API cache statistics",
                "description": "Retrieve detailed statistics about API cache performance and usage",
                "tags": ["Cache"],
                "security": [
                    {
                        "isAuthenticated": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "data": {
                                            "type": "object",
                                            "description": "Cache statistics data"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api-docs/swagger.json": {
            "get": {
                "summary": "Get OpenAPI/Swagger specification",
                "description": "Returns the complete OpenAPI specification for the API",
                "tags": ["Documentation"],
                "responses": {
                    "200": {
                        "description": "OpenAPI specification",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "OpenAPI 3.0 specification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/logs": {
            "get": {
                "summary": "Admin logs viewer",
                "description": "Serves the live log viewer page for administrators",
                "tags": ["Admin"],
                "security": [
                    {
                        "isAuthenticated": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logs viewer page served successfully",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required"
                    }
                }
            }
        },
        "/api/health": {
            "get": {
                "summary": "Application Health Check",
                "description": "Performs comprehensive health checks of the application, including configuration validation and connectivity tests for all configured media servers. The response includes detailed status information for each component. Returns a 200 OK status if all critical checks pass, and a 503 Service Unavailable if any critical check fails. Some non-critical warnings (like having no media servers enabled) will not cause a 503 status.\n",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "All systems are operational.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "One or more systems are not operational.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "summary": "Health Check Endpoint",
                "description": "Health check endpoint that returns basic service status by default. Use ?detailed=true query parameter for comprehensive health checks including configuration validation, filesystem access, and media server connectivity.\n",
                "tags": ["Public API"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "detailed",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Whether to perform detailed health checks"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health check completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/BasicHealthResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/HealthCheckResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/restart-app": {
            "post": {
                "summary": "Restart the application",
                "description": "Sends a command to PM2 to restart the application. This is useful after modifying critical settings such as the port. The API responds immediately with a 202 Accepted status.\n",
                "tags": ["Admin", "Operations"],
                "responses": {
                    "200": {
                        "description": "Restart initiated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "restarting": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Restart command received and is being processed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (admin only)"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/get-config": {
            "get": {
                "summary": "Retrieve the public application configuration",
                "description": "Fetches the non-sensitive configuration needed by the frontend for display logic. This endpoint is also accessible via the versioned API at /api/v1/config. The response is cached for 30 seconds to improve performance.\n",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "The public configuration object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get-media": {
            "get": {
                "summary": "Retrieve the shuffled media playlist",
                "description": "Returns an array of media items from all configured and enabled media servers. This endpoint is also accessible via the versioned API at /api/v1/media. The response is served from an in-memory cache that is periodically refreshed in the background. If the cache is empty (e.g., on first startup), returns a 202 Accepted response while the playlist is being built. If no media servers are configured or the initial fetch fails, returns a 503 Service Unavailable. The playlist is shuffled to ensure random playback order.\n",
                "tags": ["Public API"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "source",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["plex", "jellyfin", "tmdb"]
                        },
                        "description": "Filter results to a single content source"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of media items.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MediaItem"
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The playlist is being built, please try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service unavailable. The initial media fetch may have failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/get-media-by-key/{key}": {
            "get": {
                "summary": "Retrieve a single media item by its unique key",
                "description": "Fetches the full details for a specific media item, typically used when a user clicks on a 'recently added' item that isn't in the main playlist.",
                "tags": ["Public API"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The unique key of the media item (e.g., plex-MyPlex-12345)."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested media item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaItem"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Media item not found."
                    }
                }
            }
        },
        "/image": {
            "get": {
                "summary": "Image proxy",
                "description": "Proxies image requests to the media server (Plex/Jellyfin) or external URLs to avoid exposing server details and tokens to the client.",
                "tags": ["Public API"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "server",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The name of the server config from config.json (for Plex-style paths)."
                    },
                    {
                        "in": "query",
                        "name": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The image path from the media item object (e.g., /library/metadata/12345/art/...)."
                    },
                    {
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Direct URL to proxy (for Jellyfin and external images)."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested image.",
                        "content": {
                            "image/*": {}
                        }
                    },
                    "302": {
                        "description": "Redirects to a fallback image on error."
                    },
                    "400": {
                        "description": "Bad request, missing parameters."
                    }
                }
            }
        },
        "/admin/setup": {
            "get": {
                "summary": "Admin setup page",
                "description": "Serves the initial admin setup page if no admin user exists, otherwise redirects to admin panel",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Setup page served successfully",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirects to admin panel if setup is already complete"
                    }
                }
            },
            "post": {
                "summary": "Complete admin setup",
                "description": "Creates the initial admin user account with username and password",
                "tags": ["Admin"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": ["username", "password"],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "Admin username"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "description": "Admin password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Admin setup completed successfully"
                    },
                    "400": {
                        "description": "Missing username or password"
                    },
                    "403": {
                        "description": "Admin user already configured"
                    }
                }
            }
        },
        "/admin/login": {
            "get": {
                "summary": "Admin login page",
                "description": "Serves the admin login page, redirects to setup if admin not configured, or to admin panel if already logged in",
                "tags": ["Authentication"],
                "responses": {
                    "200": {
                        "description": "Login page served successfully",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirects to setup page or admin panel as appropriate"
                    }
                }
            },
            "post": {
                "summary": "Admin login authentication",
                "description": "Authenticate admin user with username and password. May require 2FA verification if enabled.",
                "tags": ["Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": ["username", "password"],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "Admin username"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "description": "Admin password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful (may redirect to 2FA verification)"
                    },
                    "401": {
                        "description": "Invalid username or password"
                    },
                    "429": {
                        "description": "Too many login attempts"
                    }
                }
            }
        },
        "/admin/2fa-verify": {
            "get": {
                "summary": "Two-factor authentication verification page",
                "description": "Serves the 2FA verification page for users who have completed initial login",
                "tags": ["Authentication"],
                "responses": {
                    "200": {
                        "description": "2FA verification page served successfully",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to login if 2FA not required"
                    }
                }
            },
            "post": {
                "summary": "Verify two-factor authentication code",
                "description": "Verifies the TOTP code and completes the admin login process",
                "tags": ["Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "totp_code": {
                                        "type": "string",
                                        "description": "6-digit TOTP code from authenticator app",
                                        "pattern": "^\\d{6}$"
                                    }
                                },
                                "required": ["totp_code"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "2FA verification successful, user logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "redirectTo": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to login if 2FA session expired"
                    },
                    "400": {
                        "description": "Invalid or missing TOTP code"
                    }
                }
            }
        },
        "/admin/logout": {
            "get": {
                "summary": "Admin logout",
                "description": "Logs out the admin user by destroying their session and redirects to login page",
                "tags": ["Authentication"],
                "responses": {
                    "302": {
                        "description": "Session destroyed, redirects to login page"
                    },
                    "500": {
                        "description": "Error destroying session"
                    }
                }
            }
        },
        "/api/admin/2fa/generate": {
            "post": {
                "summary": "Generate a new 2FA secret",
                "description": "Generates a new secret for Two-Factor Authentication (2FA) and returns a QR code that the user can scan with an authenticator app. The secret is temporarily stored in the session and only becomes permanent after successful verification.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QR code and secret successfully generated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Generate2FAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "2FA is already enabled."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/api/admin/2fa/verify": {
            "post": {
                "summary": "Verify and enable 2FA",
                "description": "Verifies the TOTP code entered by the user against the temporary secret in the session. Upon success, the 2FA secret is permanently stored in the .env file and 2FA is activated.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Verify2FARequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "2FA successfully enabled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid verification code or no 2FA process pending."
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/2fa/disable": {
            "post": {
                "summary": "Disable 2FA",
                "description": "Disables Two-Factor Authentication for the admin account. The user must provide their current password for confirmation.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Disable2FARequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "2FA successfully disabled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Password is required."
                    },
                    "401": {
                        "description": "Invalid password or unauthorized."
                    }
                }
            }
        },
        "/api/config": {
            "get": {
                "summary": "Get public configuration",
                "description": "Public endpoint that returns non-sensitive configuration data, such as server availability and enabled services status.\n",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "Public configuration data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "plex": {
                                            "type": "object",
                                            "properties": {
                                                "server": {
                                                    "type": "string",
                                                    "description": "Plex server address",
                                                    "nullable": true
                                                },
                                                "token": {
                                                    "type": "boolean",
                                                    "description": "Whether Plex token is configured"
                                                }
                                            }
                                        },
                                        "tmdb": {
                                            "type": "object",
                                            "properties": {
                                                "enabled": {
                                                    "type": "boolean",
                                                    "description": "Whether TMDB API is enabled"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/version": {
            "get": {
                "summary": "Get application version",
                "description": "Returns the current version of the Posterrama application",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "Application version information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string",
                                            "description": "The current version number"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Application name"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/github/latest": {
            "get": {
                "summary": "Get latest release information (public)",
                "description": "Public endpoint to check for the latest GitHub release. Returns basic version comparison without authentication.\n",
                "tags": ["Public API"],
                "responses": {
                    "200": {
                        "description": "Latest release information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "currentVersion": {
                                            "type": "string"
                                        },
                                        "latestVersion": {
                                            "type": "string"
                                        },
                                        "hasUpdate": {
                                            "type": "boolean"
                                        },
                                        "releaseUrl": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/config": {
            "get": {
                "summary": "Get current server configuration",
                "description": "Retrieves the complete `config.json` along with relevant environment variables and security status (like 2FA) needed for the admin panel.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": [],
                        "isAuthenticated": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminConfigResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            },
            "post": {
                "summary": "Update server configuration (partial)",
                "description": "Saves the changes to both `config.json` and the `.env` file. After a successful save, the application caches and clients are cleared and a background refresh of the playlist is initiated.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": [],
                        "isAuthenticated": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SaveConfigRequest",
                                "type": "object",
                                "properties": {
                                    "config": {
                                        "type": "object",
                                        "description": "Partial config to deep-merge into config.json"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Configuration updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body."
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/config/schema": {
            "get": {
                "summary": "Retrieve configuration JSON schema",
                "description": "Returns the config.schema.json used for validating configuration. Admin-only.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The JSON schema document",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/api/admin/config-schema": {
            "get": {
                "summary": "Retrieve configuration JSON schema (alias)",
                "description": "Alias of /api/admin/config/schema returning config.schema.json for autocomplete tooling in the admin UI.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The JSON schema document",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/api/admin/test-plex": {
            "post": {
                "summary": "Test connection to a Plex server",
                "description": "Checks if the application can connect to a Plex server with the provided hostname, port, and token. This is a lightweight check that queries the server root.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlexConnectionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Connection successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Connection error (e.g., incorrect credentials, timeout)."
                    }
                }
            }
        },
        "/api/admin/plex-libraries": {
            "post": {
                "summary": "Retrieve Plex libraries",
                "description": "Retrieves a list of all available libraries (such as 'Movies', 'TV Shows') from the configured Plex server.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "Optional connection details. If not provided, the configured values will be used.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlexConnectionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A list of found libraries.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlexLibrariesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Could not fetch libraries (e.g., incorrect credentials)."
                    }
                }
            }
        },
        "/api/admin/test-jellyfin": {
            "post": {
                "summary": "Test connection to a Jellyfin server",
                "description": "Checks if the application can connect to a Jellyfin server with the provided hostname, port, and API key. This is a lightweight check that queries the system info.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string",
                                        "description": "Jellyfin server hostname or IP address"
                                    },
                                    "port": {
                                        "type": "number",
                                        "description": "Jellyfin server port (typically 8096)"
                                    },
                                    "apiKey": {
                                        "type": "string",
                                        "description": "Jellyfin API key"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Connection successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Connection error (e.g., incorrect credentials, timeout)."
                    }
                }
            }
        },
        "/api/admin/jellyfin-libraries": {
            "post": {
                "summary": "Fetch Jellyfin media libraries",
                "description": "Retrieves the list of media libraries from a Jellyfin server. Returns libraries with their types (movie, show, etc.).\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string",
                                        "description": "Jellyfin server hostname or IP address"
                                    },
                                    "port": {
                                        "type": "number",
                                        "description": "Jellyfin server port"
                                    },
                                    "apiKey": {
                                        "type": "string",
                                        "description": "Jellyfin API key"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Libraries fetched successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "libraries": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Could not fetch libraries (e.g., incorrect credentials)."
                    }
                }
            }
        },
        "/api/admin/plex-genres": {
            "get": {
                "summary": "Get all available genres from Plex servers",
                "description": "Retrieves a list of all genres available in the configured Plex servers.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available genres.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/plex-genres-with-counts": {
            "get": {
                "summary": "Retourneert alle Plex genres met aantallen",
                "tags": ["Admin"],
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "SessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succesvol",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "genre": {
                                                        "type": "string"
                                                    },
                                                    "count": {
                                                        "type": "number"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/plex-genres-test": {
            "post": {
                "summary": "Get Plex genres for testing (with connection parameters)",
                "description": "Retrieves all available genres from a Plex server using provided connection parameters.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string",
                                        "description": "Plex server hostname or IP"
                                    },
                                    "port": {
                                        "type": "string",
                                        "description": "Plex server port"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "Plex authentication token (optional if configured)"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of genres successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/admin/plex-genres-with-counts-test": {
            "post": {
                "summary": "Get Plex genres with counts for testing (with connection parameters)",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": "string"
                                    },
                                    "token": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of genres with counts successfully retrieved"
                    }
                }
            }
        },
        "/api/admin/jellyfin-genres": {
            "post": {
                "summary": "Get genres from Jellyfin libraries",
                "description": "Retrieves all unique genres from the specified Jellyfin libraries.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": "number"
                                    },
                                    "apiKey": {
                                        "type": "string"
                                    },
                                    "movieLibraries": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "showLibraries": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Genres retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/admin/jellyfin-genres-with-counts": {
            "post": {
                "summary": "Get genres with counts from Jellyfin libraries",
                "description": "Retrieves all unique genres with their counts from the specified Jellyfin libraries.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hostname": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": "number"
                                    },
                                    "apiKey": {
                                        "type": "string"
                                    },
                                    "movieLibraries": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "showLibraries": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "genre": {
                                                        "type": "string"
                                                    },
                                                    "count": {
                                                        "type": "number"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/admin/plex-qualities-with-counts": {
            "get": {
                "summary": "Get Plex qualities with content counts",
                "description": "Retrieves available video qualities from Plex servers with item counts",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Quality data with counts"
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/jellyfin-qualities-with-counts": {
            "get": {
                "summary": "Get Jellyfin qualities with content counts",
                "description": "Retrieves available video qualities from Jellyfin servers with item counts",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Quality data with counts"
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/test-tmdb": {
            "post": {
                "summary": "Test TMDB API connection",
                "description": "Tests the connection to TMDB API with provided credentials.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "apiKey": {
                                        "type": "string",
                                        "description": "TMDB API key"
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Content category to test"
                                    }
                                },
                                "required": ["apiKey"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "TMDB connection test result.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "count": {
                                            "type": "number"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/tmdb-genres": {
            "get": {
                "summary": "Get available TMDB genres",
                "description": "Fetches the list of available genres from TMDB API for filtering.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of TMDB genres.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/tmdb-genres-test": {
            "post": {
                "summary": "Get TMDB genres for testing (with connection parameters)",
                "description": "Retrieves all available genres from TMDB using provided API key.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "apiKey": {
                                        "type": "string",
                                        "description": "TMDB API key"
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "TMDB category (popular, top_rated, etc.)"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of genres successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "genres": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/admin/tmdb-total": {
            "get": {
                "summary": "Get uncapped TMDB totals for current configuration",
                "description": "Returns the approximate total number of movies and shows available from TMDB for the configured category/region (not limited to the 150 cached in the playlist).",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TMDB totals",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean"
                                        },
                                        "movies": {
                                            "type": "number"
                                        },
                                        "shows": {
                                            "type": "number"
                                        },
                                        "total": {
                                            "type": "number"
                                        },
                                        "note": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/tmdb-cache-stats": {
            "get": {
                "summary": "Get TMDB cache statistics",
                "description": "Returns cache statistics for debugging TMDB performance.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TMDB cache statistics.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "cacheStats": {
                                            "type": "object"
                                        },
                                        "enabled": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/change-password": {
            "post": {
                "summary": "Change the admin password",
                "description": "Allows the user to change their own admin password.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password successfully changed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Required fields missing or new passwords do not match."
                    },
                    "401": {
                        "description": "Current password is incorrect."
                    }
                }
            }
        },
        "/api/admin/status": {
            "get": {
                "summary": "Get system status information",
                "description": "Returns comprehensive system status including application, database, cache, disk space, memory usage, and uptime information.\n",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "System status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "app": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "running"
                                                }
                                            }
                                        },
                                        "database": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "connected"
                                                }
                                            }
                                        },
                                        "cache": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "active"
                                                }
                                            }
                                        },
                                        "uptime": {
                                            "type": "string",
                                            "example": "2d 5h"
                                        },
                                        "uptimeSeconds": {
                                            "type": "integer",
                                            "example": 183600
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/version": {
            "get": {
                "summary": "Get current application version",
                "description": "Returns the current version of the application from package.json",
                "tags": ["Admin"],
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current version retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "version": {
                                            "type": "string",
                                            "example": "1.7.6"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/admin/update-check": {
            "get": {
                "summary": "Check for application updates",
                "description": "Checks the current version against the latest GitHub release and determines if an update is available. Returns detailed version information and release notes.\n",
                "tags": ["Auto-Update"],
                "responses": {
                    "200": {
                        "description": "Update check completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "currentVersion": {
                                            "type": "string",
                                            "example": "1.5.0"
                                        },
                                        "latestVersion": {
                                            "type": "string",
                                            "example": "1.6.0"
                                        },
                                        "hasUpdate": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "updateType": {
                                            "type": "string",
                                            "example": "minor"
                                        },
                                        "releaseUrl": {
                                            "type": "string",
                                            "example": "https://github.com/Posterrama/posterrama/releases/tag/v1.6.0"
                                        },
                                        "downloadUrl": {
                                            "type": "string",
                                            "example": "https://github.com/Posterrama/posterrama/archive/v1.6.0.tar.gz"
                                        },
                                        "releaseNotes": {
                                            "type": "string",
                                            "example": "### New Features\n- Added GitHub integration"
                                        },
                                        "publishedAt": {
                                            "type": "string",
                                            "example": "2025-08-15T20:00:00Z"
                                        },
                                        "releaseName": {
                                            "type": "string",
                                            "example": "Version 1.6.0 - GitHub Integration"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/github/releases": {
            "get": {
                "summary": "Get recent GitHub releases",
                "description": "Fetches recent releases from the GitHub repository. Useful for displaying a changelog or release history.\n",
                "tags": ["GitHub Integration"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "minimum": 1,
                            "maximum": 20
                        },
                        "description": "Maximum number of releases to fetch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent releases",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "tag_name": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "body": {
                                                "type": "string"
                                            },
                                            "published_at": {
                                                "type": "string"
                                            },
                                            "html_url": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/github/repository": {
            "get": {
                "summary": "Get repository information",
                "description": "Fetches general information about the GitHub repository, including stars, forks, and other metadata.\n",
                "tags": ["GitHub Integration"],
                "responses": {
                    "200": {
                        "description": "Repository information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "fullName": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "stars": {
                                            "type": "integer"
                                        },
                                        "forks": {
                                            "type": "integer"
                                        },
                                        "issues": {
                                            "type": "integer"
                                        },
                                        "language": {
                                            "type": "string"
                                        },
                                        "license": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/github/clear-cache": {
            "post": {
                "summary": "Clear GitHub API cache",
                "description": "Clears the internal cache for GitHub API responses. This forces fresh data to be fetched on the next request.\n",
                "tags": ["GitHub Integration"],
                "responses": {
                    "200": {
                        "description": "Cache cleared successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "GitHub cache cleared successfully"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/update/start": {
            "post": {
                "summary": "Start automatic update process",
                "description": "Initiates the automatic update process. This will download the latest version, create a backup, and update the application. The process includes rollback capability in case of failure.\n",
                "tags": ["Auto-Update"],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": "Specific version to update to (optional)",
                                        "example": "1.6.0"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "Force update even if already on latest version",
                                        "default": false
                                    },
                                    "dryRun": {
                                        "type": "boolean",
                                        "description": "Simulate update phases without changing files or services",
                                        "default": false
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update process started successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "updateId": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Update already in progress or invalid request"
                    },
                    "500": {
                        "description": "Failed to start update process"
                    }
                }
            }
        },
        "/api/admin/update/status": {
            "get": {
                "summary": "Get update process status",
                "description": "Returns the current status of any ongoing update process, including progress, current phase, and any errors.\n",
                "tags": ["Auto-Update"],
                "responses": {
                    "200": {
                        "description": "Update status information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "phase": {
                                            "type": "string",
                                            "enum": [
                                                "idle",
                                                "checking",
                                                "backup",
                                                "download",
                                                "validation",
                                                "stopping",
                                                "applying",
                                                "dependencies",
                                                "starting",
                                                "verification",
                                                "completed",
                                                "error",
                                                "rollback"
                                            ]
                                        },
                                        "progress": {
                                            "type": "integer",
                                            "minimum": 0,
                                            "maximum": 100
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string",
                                            "nullable": true
                                        },
                                        "startTime": {
                                            "type": "string",
                                            "format": "date-time",
                                            "nullable": true
                                        },
                                        "backupPath": {
                                            "type": "string",
                                            "nullable": true
                                        },
                                        "isUpdating": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/update/rollback": {
            "post": {
                "summary": "Rollback to previous version",
                "description": "Rollback to the most recent backup created during an update. This is useful if an update causes issues.\n",
                "tags": ["Auto-Update"],
                "responses": {
                    "200": {
                        "description": "Rollback completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No backup available for rollback"
                    },
                    "500": {
                        "description": "Rollback failed"
                    }
                }
            }
        },
        "/api/admin/update/backups": {
            "get": {
                "summary": "List available backups",
                "description": "Returns a list of all available backups that can be used for rollback or manual restoration.\n",
                "tags": ["Auto-Update"],
                "responses": {
                    "200": {
                        "description": "List of available backups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "version": {
                                                "type": "string"
                                            },
                                            "timestamp": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "size": {
                                                "type": "integer"
                                            },
                                            "created": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/update/cleanup": {
            "post": {
                "summary": "Cleanup old backups",
                "description": "Remove old backups to free up disk space, keeping only the most recent backups as specified.\n",
                "tags": ["Auto-Update"],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "keepCount": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 20,
                                        "default": 5,
                                        "description": "Number of recent backups to keep"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cleanup completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "deleted": {
                                            "type": "integer"
                                        },
                                        "kept": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/performance": {
            "get": {
                "summary": "Get system performance metrics",
                "description": "Returns real-time system performance data including CPU usage, memory usage, disk usage, and load average.\n",
                "tags": ["Admin"],
                "responses": {
                    "200": {
                        "description": "Performance metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "cpu": {
                                            "type": "object",
                                            "properties": {
                                                "usage": {
                                                    "type": "number",
                                                    "example": 45.2
                                                },
                                                "loadAverage": {
                                                    "type": "string",
                                                    "example": "0.75, 0.82, 0.90"
                                                }
                                            }
                                        },
                                        "memory": {
                                            "type": "object",
                                            "properties": {
                                                "usage": {
                                                    "type": "number",
                                                    "example": 68.5
                                                },
                                                "used": {
                                                    "type": "string",
                                                    "example": "2.1 GB"
                                                },
                                                "total": {
                                                    "type": "string",
                                                    "example": "3.1 GB"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/refresh-media": {
            "post": {
                "summary": "Force an immediate refresh of the media playlist",
                "description": "Manually starts the process to fetch media from all configured servers. This is an asynchronous operation. The API responds when the refresh is complete. This endpoint is secured and requires an active admin session.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The playlist has been successfully refreshed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshMediaResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/reset-refresh": {
            "post": {
                "summary": "Reset stuck playlist refresh state",
                "description": "Force-reset the playlist refresh state if it gets stuck",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Refresh state has been reset successfully"
                    }
                }
            }
        },
        "/api/admin/debug-cache": {
            "get": {
                "summary": "Debug cache status and configuration",
                "tags": ["Admin"],
                "security": [
                    {
                        "isAuthenticated": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache debug information"
                    },
                    "401": {
                        "description": "Niet geautoriseerd."
                    }
                }
            }
        },
        "/api/admin/clear-image-cache": {
            "post": {
                "summary": "Clear the server-side image cache",
                "description": "Deletes all cached images from the `image_cache` directory on the server. This forces the application to re-fetch all images from the origin media servers.\n",
                "tags": ["Cache"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The image cache was successfully cleared.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/cache-stats": {
            "get": {
                "summary": "Get cache statistics",
                "description": "Returns cache size and disk usage information using session authentication",
                "tags": ["Admin"],
                "security": [
                    {
                        "isAuthenticated": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache statistics retrieved successfully"
                    }
                }
            }
        },
        "/api/admin/source-status": {
            "get": {
                "summary": "Get per-source status for admin UI",
                "description": "Returns enabled/configured flags and lastFetch timestamps for Plex, Jellyfin, and TMDB.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Per-source status"
                    }
                }
            }
        },
        "/api/admin/cleanup-cache": {
            "post": {
                "summary": "Cleanup cache directories",
                "description": "Performs cleanup of cache directories by removing old or expired files based on configuration",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache cleanup completed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "filesRemoved": {
                                            "type": "number"
                                        },
                                        "spaceSaved": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Cache cleanup failed"
                    }
                }
            }
        },
        "/api/admin/api-key": {
            "get": {
                "summary": "Get the current API key",
                "description": "Retrieves the currently configured API access key. This is only returned to an authenticated admin session.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The API key.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "apiKey": {
                                            "type": "string",
                                            "nullable": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/api-key/status": {
            "get": {
                "summary": "Check the API key status",
                "description": "Indicates whether an API access key is currently configured in the application.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The API key status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "hasKey": {
                                            "type": "boolean",
                                            "description": "Whether an API key is currently configured.",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/api-key/generate": {
            "post": {
                "summary": "Generate a new API key",
                "description": "Generates a new, cryptographically secure API access token and stores it in the .env file and overwrites any existing key. The new key is returned ONCE ONLY. Store it securely, as it cannot be retrieved again.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly generated API key.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeyResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/api-key/revoke": {
            "post": {
                "summary": "Revoke current API key",
                "description": "Removes the current API access token from the configuration, making it unusable.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirmation that the key has been revoked.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminApiResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/logs": {
            "get": {
                "summary": "Get the most recent application logs",
                "description": "Retrieves a list of the most recent log entries stored in memory. This is useful for debugging from the admin panel without direct server access.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of log objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LogEntry"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/logs/level": {
            "get": {
                "summary": "Get current log level configuration",
                "description": "Retrieves the current Winston log level setting",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current log level configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "currentLevel": {
                                            "type": "string",
                                            "enum": [
                                                "error",
                                                "warn",
                                                "info",
                                                "http",
                                                "verbose",
                                                "debug",
                                                "silly"
                                            ]
                                        },
                                        "availableLevels": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Update log level configuration",
                "description": "Changes the Winston log level at runtime without restarting the server",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["level"],
                                "properties": {
                                    "level": {
                                        "type": "string",
                                        "enum": [
                                            "error",
                                            "warn",
                                            "info",
                                            "http",
                                            "verbose",
                                            "debug",
                                            "silly"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Log level updated successfully"
                    },
                    "400": {
                        "description": "Invalid log level provided"
                    }
                }
            }
        },
        "/api/admin/notify/test": {
            "post": {
                "summary": "Emit a test admin notification",
                "description": "Triggers a test log entry (info/warn/error) that flows through the admin notification center and SSE stream.",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationTestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification emitted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationTestResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to emit notification"
                    }
                }
            }
        },
        "/api/admin/config-backups": {
            "get": {
                "summary": "List configuration backups",
                "description": "Returns a list of available configuration backups with their files and metadata.",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of backups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupListResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new configuration backup",
                "description": "Creates a new backup of whitelisted configuration files (config.json, .env, devices/groups, presets).",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Backup metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupCreateResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/config-backups/cleanup": {
            "post": {
                "summary": "Cleanup old backups",
                "description": "Deletes older backups while keeping the most recent N backups (default 5).",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "keep": {
                                        "type": "integer",
                                        "description": "Number of most recent backups to retain (1-60)",
                                        "example": 5
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cleanup result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupCleanupResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/config-backups/restore": {
            "post": {
                "summary": "Restore a file from a backup",
                "description": "Restores a whitelisted file (e.g., config.json or .env) from a specified backup.",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["backupId", "file"],
                                "properties": {
                                    "backupId": {
                                        "type": "string"
                                    },
                                    "file": {
                                        "type": "string",
                                        "enum": [
                                            "config.json",
                                            "device-presets.json",
                                            "devices.json",
                                            "groups.json",
                                            ".env"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Restore successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupRestoreResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or restore failed"
                    }
                }
            }
        },
        "/api/admin/config-backups/{id}": {
            "delete": {
                "summary": "Delete a specific backup",
                "description": "Permanently deletes a backup directory by ID.",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupDeleteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID or deletion failed"
                    }
                }
            }
        },
        "/api/admin/config-backups/schedule": {
            "get": {
                "summary": "Read backup schedule configuration",
                "description": "Returns current daily schedule for automatic backups (enabled flag, time, and retention).",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupScheduleResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Update backup schedule configuration",
                "description": "Saves daily backup scheduler configuration and realigns the in-memory scheduler.",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BackupSchedule"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Saved schedule",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackupScheduleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation or save failure"
                    }
                }
            }
        },
        "/admin/debug": {
            "get": {
                "summary": "Retrieve debug information",
                "description": "Returns the raw data of all items in the current *cached* playlist. This endpoint is only available when debug mode is enabled in the .env file.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The raw data from the playlist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DebugResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found (if debug mode is disabled)."
                    }
                }
            }
        },
        "/[site]": {
            "get": {
                "summary": "Site server homepage",
                "description": "Serves the promotional homepage for the public-facing site server",
                "tags": ["Site Server"],
                "responses": {
                    "200": {
                        "description": "Promotional homepage HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/[site]/*": {
            "get": {
                "summary": "Site server fallback route",
                "description": "Fallback route that serves the promotional page for any unmatched paths on the site server",
                "tags": ["Site Server"],
                "responses": {
                    "200": {
                        "description": "Promotional page HTML",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/events": {
            "get": {
                "summary": "Subscribe to Admin Server-Sent Events",
                "description": "Stream of server-sent events (SSE) for admin notifications and logs. Requires an authenticated admin session.\nThe stream emits periodic ping events to keep the connection alive and \"log\" events for recent log entries\nand admin notifications. Content-Type is text/event-stream.\n",
                "tags": ["Admin"],
                "security": [
                    {
                        "sessionAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event stream started",
                        "content": {
                            "text/event-stream": {
                                "schema": {
                                    "type": "string",
                                    "example": ": connected\\n\\n\nevent: hello\\n\ndata: {\"t\": 1700000000000}\\n\\n\nevent: ping\\n\ndata: {\"t\": 1700000002500}\\n\\n\nevent: log\\n\ndata: {\"level\":\"info\",\"message\":\"Started\"}\\n\\n\n"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (no admin session)"
                    }
                }
            }
        }
    }
}
